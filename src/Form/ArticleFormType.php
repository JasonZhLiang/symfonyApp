<?php


namespace App\Form;


use App\Entity\Article;
use App\Entity\User;
use App\Repository\UserRepository;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ArticleFormType extends AbstractType
{

    private $userRepository;

    public function __construct(UserRepository $userRepository)
    {

        $this->userRepository = $userRepository;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $article = $options['data'] ?? null;
        $isEdit = $article && $article->getId();//to check is $article is not null and has a id with it, just for double ensure new form not pass a template for it.
        $builder
            ->add('title', TextType::class,[
                'help' => 'Choose something catchy!',
            ])
            ->add('content',null,[
                'rows' => 15,
            ])
//            ->add('publishedAt',null,[
//                'widget' => 'single_text',
//            ])//set second argument as null, just tell symfony continue guessing this field type, move it to bottom with condition
//            ->add('author', EntityType::class, [
//                'class' => User::class,
////                'choice_label' => 'email',//see below how to use a callback function to control the display
//                'choice_label' => function(User $user){
//                    return sprintf('(%d) %s', $user->getId(), $user->getEmail());
//                },
//                'placeholder' => 'Choose an author',
//                'choices' => $this->userRepository
//                    ->findAllEmailAlphabetical(),
//                'invalid_message' => 'Symfony is too smart for your hacking'
//            ])
            ->add('author', UserSelectTextType::class, [
                'disabled' => $isEdit,
            ])
        ;//if you do nothing every thing render as text input, once you configure bind the below class, form type guessing system will render them according their type in class

        if($options['include_published_at']){
            $builder->add('publishedAt',null,[
                'widget' => 'single_text',
            ]);//set second argument as null, just tell symfony continue guessing this field type
        }
    }

    public function configureOptions(OptionsResolver $resolver)
    {
//        parent::configureOptions($resolver); // TODO: Change the autogenerated stub, we don't have to call the parent class since it is empty
        $resolver->setDefaults([
            'data_class' => Article::class,
            'include_published_at' => false,
        ]);
    }
}